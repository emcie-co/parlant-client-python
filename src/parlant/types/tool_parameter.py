# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
from .type import Type
import typing
from .tool_parameter_dto_enum_item import ToolParameterDtoEnumItem
from ..core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic


class ToolParameter(UniversalBaseModel):
    type: Type
    description: typing.Optional[str] = None
    enum: typing.Optional[typing.List[ToolParameterDtoEnumItem]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
