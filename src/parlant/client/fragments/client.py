# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..types.slot import Slot
from ..core.request_options import RequestOptions
from ..types.fragment import Fragment
from ..core.serialization import convert_and_respect_annotation_metadata
from ..core.pydantic_utilities import parse_obj_as
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..core.jsonable_encoder import jsonable_encoder
from ..errors.not_found_error import NotFoundError
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class FragmentsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def create(
        self,
        *,
        value: str,
        slots: typing.Sequence[Slot],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Fragment:
        """
        Parameters
        ----------
        value : str
            The textual content of the fragment.

        slots : typing.Sequence[Slot]
            A sequence of slots associated with the fragment.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Fragment
            Fragment successfully created.

        Examples
        --------
        from parlant.client import ParlantClient, Slot

        client = ParlantClient(
            base_url="https://yourhost.com/path/to/api",
        )
        client.fragments.create(
            value="Your account balance is {balance}",
            slots=[
                Slot(
                    name="balance",
                    description="Account's balance",
                    examples=["9000"],
                )
            ],
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "fragments",
            method="POST",
            json={
                "value": value,
                "slots": convert_and_respect_annotation_metadata(
                    object_=slots, annotation=typing.Sequence[Slot], direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Fragment,
                    parse_obj_as(
                        type_=Fragment,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def retrieve(
        self,
        fragment_id: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Fragment:
        """
        Retrieves details of a specific fragment by ID.

        Parameters
        ----------
        fragment_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Fragment
            Fragment details successfully retrieved. Returns the Fragment object.

        Examples
        --------
        from parlant.client import ParlantClient

        client = ParlantClient(
            base_url="https://yourhost.com/path/to/api",
        )
        client.fragments.retrieve(
            fragment_id="fragment_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"fragments/{jsonable_encoder(fragment_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Fragment,
                    parse_obj_as(
                        type_=Fragment,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncFragmentsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def create(
        self,
        *,
        value: str,
        slots: typing.Sequence[Slot],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Fragment:
        """
        Parameters
        ----------
        value : str
            The textual content of the fragment.

        slots : typing.Sequence[Slot]
            A sequence of slots associated with the fragment.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Fragment
            Fragment successfully created.

        Examples
        --------
        import asyncio

        from parlant.client import AsyncParlantClient, Slot

        client = AsyncParlantClient(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.fragments.create(
                value="Your account balance is {balance}",
                slots=[
                    Slot(
                        name="balance",
                        description="Account's balance",
                        examples=["9000"],
                    )
                ],
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "fragments",
            method="POST",
            json={
                "value": value,
                "slots": convert_and_respect_annotation_metadata(
                    object_=slots, annotation=typing.Sequence[Slot], direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Fragment,
                    parse_obj_as(
                        type_=Fragment,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def retrieve(
        self,
        fragment_id: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Fragment:
        """
        Retrieves details of a specific fragment by ID.

        Parameters
        ----------
        fragment_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Fragment
            Fragment details successfully retrieved. Returns the Fragment object.

        Examples
        --------
        import asyncio

        from parlant.client import AsyncParlantClient

        client = AsyncParlantClient(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.fragments.retrieve(
                fragment_id="fragment_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"fragments/{jsonable_encoder(fragment_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Fragment,
                    parse_obj_as(
                        type_=Fragment,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
