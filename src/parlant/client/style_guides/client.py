# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.style_guide import StyleGuide
from ..core.jsonable_encoder import jsonable_encoder
from ..core.pydantic_utilities import parse_obj_as
from ..errors.not_found_error import NotFoundError
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..types.invoice import Invoice
from ..types.style_guide_creation_result import StyleGuideCreationResult
from ..core.serialization import convert_and_respect_annotation_metadata
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class StyleGuidesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list(
        self, agent_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[StyleGuide]:
        """
        Lists all style guides for the specified agent (style_guide_set).
        Returns an empty list if none exist.

        Parameters
        ----------
        agent_id : str
            Unique identifier for the agent

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[StyleGuide]
            List of all style guides for the specified agent.

        Examples
        --------
        from parlant.client import ParlantClient

        client = ParlantClient(
            base_url="https://yourhost.com/path/to/api",
        )
        client.style_guides.list(
            agent_id="agent_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"agents/{jsonable_encoder(agent_id)}/style_guides",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[StyleGuide],
                    parse_obj_as(
                        type_=typing.List[StyleGuide],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create(
        self,
        agent_id: str,
        *,
        invoices: typing.Sequence[Invoice],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> StyleGuideCreationResult:
        """
        Creates new style guides from the provided invoices.

        Invoices are obtained by calling the `create_evaluation` method of the client.
        (Equivalent to making a POST request to `/index/evaluations`)
        See the [documentation](https://parlant.io/docs/concepts/customization/style-guides) for more information.

        Parameters
        ----------
        agent_id : str
            Unique identifier for the agent

        invoices : typing.Sequence[Invoice]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StyleGuideCreationResult
            Style guides successfully created. Returns the created style guides.

        Examples
        --------
        from parlant.client import (
            Invoice,
            InvoiceData,
            ParlantClient,
            Payload,
            StyleGuideCoherenceCheck,
            StyleGuideContent,
            StyleGuideEvent,
            StyleGuideExample,
            StyleGuideInvoiceData,
            StyleGuidePayload,
        )

        client = ParlantClient(
            base_url="https://yourhost.com/path/to/api",
        )
        client.style_guides.create(
            agent_id="agent_id",
            invoices=[
                Invoice(
                    payload=Payload(
                        kind="style_guide",
                        style_guide=StyleGuidePayload(
                            content=StyleGuideContent(
                                principle="Use inclusive language and a positive tone",
                                examples=[
                                    StyleGuideExample(
                                        before=[
                                            StyleGuideEvent(
                                                source="ai_agent",
                                                message="Your request is denied. Try again.",
                                            )
                                        ],
                                        after=[
                                            StyleGuideEvent(
                                                source="ai_agent",
                                                message="Unfortunately we can't fulfill that request right now. Let's see what else we can do to help!",
                                            )
                                        ],
                                        violation="The 'before' response is abrupt and lacks empathy.",
                                    )
                                ],
                            ),
                            operation="add",
                            coherence_check=True,
                        ),
                    ),
                    checksum="abc123",
                    approved=True,
                    data=InvoiceData(
                        style_guide=StyleGuideInvoiceData(
                            coherence_checks=[
                                StyleGuideCoherenceCheck(
                                    kind="contradiction_with_existing_style_guide",
                                    first=StyleGuideContent(
                                        principle="Use Imperial units",
                                        examples=[
                                            StyleGuideExample(
                                                before=[
                                                    StyleGuideEvent(
                                                        source="customer",
                                                        message="How tall do I have to be to get on the roller coaster?",
                                                    ),
                                                    StyleGuideEvent(
                                                        source="ai_agent",
                                                        message="1.8 meters",
                                                    ),
                                                ],
                                                after=[
                                                    StyleGuideEvent(
                                                        source="customer",
                                                        message="How tall do I have to be to get on the roller coaster?",
                                                    ),
                                                    StyleGuideEvent(
                                                        source="ai_agent",
                                                        message="5 feet 11 inches",
                                                    ),
                                                ],
                                                violation="The 'before' message is in metric units, which is not imperial.",
                                            )
                                        ],
                                    ),
                                    second=StyleGuideContent(
                                        principle="Use Metric units",
                                        examples=[
                                            StyleGuideExample(
                                                before=[
                                                    StyleGuideEvent(
                                                        source="customer",
                                                        message="How tall do I have to be to get on the roller coaster?",
                                                    ),
                                                    StyleGuideEvent(
                                                        source="ai_agent",
                                                        message="5 feet 11 inches",
                                                    ),
                                                ],
                                                after=[
                                                    StyleGuideEvent(
                                                        source="customer",
                                                        message="How tall do I have to be to get on the roller coaster?",
                                                    ),
                                                    StyleGuideEvent(
                                                        source="ai_agent",
                                                        message="1.8 meters",
                                                    ),
                                                ],
                                                violation="The 'before' message is in imperial units, which is not metric.",
                                            )
                                        ],
                                    ),
                                    issue="Conflicting approaches to writing units",
                                    severity=8,
                                )
                            ],
                        ),
                    ),
                )
            ],
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"agents/{jsonable_encoder(agent_id)}/style_guides",
            method="POST",
            json={
                "invoices": convert_and_respect_annotation_metadata(
                    object_=invoices,
                    annotation=typing.Sequence[Invoice],
                    direction="write",
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    StyleGuideCreationResult,
                    parse_obj_as(
                        type_=StyleGuideCreationResult,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def retrieve(
        self,
        agent_id: str,
        style_guide_id: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> StyleGuide:
        """
        Retrieves a style guide by its ID.

        Parameters
        ----------
        agent_id : str
            Unique identifier for the agent

        style_guide_id : str
            Unique identifier for the style guide

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StyleGuide
            Style guide details successfully retrieved.

        Examples
        --------
        from parlant.client import ParlantClient

        client = ParlantClient(
            base_url="https://yourhost.com/path/to/api",
        )
        client.style_guides.retrieve(
            agent_id="agent_id",
            style_guide_id="style_guide_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"agents/{jsonable_encoder(agent_id)}/style_guides/{jsonable_encoder(style_guide_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    StyleGuide,
                    parse_obj_as(
                        type_=StyleGuide,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete(
        self,
        agent_id: str,
        style_guide_id: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Deletes a style guide from the agent.

        Deleting a non-existent style guide will return 404.
        No content will be returned from a successful deletion.

        Parameters
        ----------
        agent_id : str
            Unique identifier for the agent

        style_guide_id : str
            Unique identifier for the style guide

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from parlant.client import ParlantClient

        client = ParlantClient(
            base_url="https://yourhost.com/path/to/api",
        )
        client.style_guides.delete(
            agent_id="agent_id",
            style_guide_id="style_guide_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"agents/{jsonable_encoder(agent_id)}/style_guides/{jsonable_encoder(style_guide_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update(
        self,
        agent_id: str,
        style_guide_id: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> StyleGuide:
        """
        Deletes a style guide from the agent.

        Deleting a non-existent style guide will return 404.
        No content will be returned from a successful deletion.

        Parameters
        ----------
        agent_id : str
            Unique identifier for the agent

        style_guide_id : str
            Unique identifier for the style guide

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StyleGuide
            Style guide successfully updated. Returns the updated guide.

        Examples
        --------
        from parlant.client import ParlantClient

        client = ParlantClient(
            base_url="https://yourhost.com/path/to/api",
        )
        client.style_guides.update(
            agent_id="agent_id",
            style_guide_id="style_guide_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"agents/{jsonable_encoder(agent_id)}/style_guides/{jsonable_encoder(style_guide_id)}",
            method="PATCH",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    StyleGuide,
                    parse_obj_as(
                        type_=StyleGuide,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncStyleGuidesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list(
        self, agent_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[StyleGuide]:
        """
        Lists all style guides for the specified agent (style_guide_set).
        Returns an empty list if none exist.

        Parameters
        ----------
        agent_id : str
            Unique identifier for the agent

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[StyleGuide]
            List of all style guides for the specified agent.

        Examples
        --------
        import asyncio

        from parlant.client import AsyncParlantClient

        client = AsyncParlantClient(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.style_guides.list(
                agent_id="agent_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"agents/{jsonable_encoder(agent_id)}/style_guides",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[StyleGuide],
                    parse_obj_as(
                        type_=typing.List[StyleGuide],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create(
        self,
        agent_id: str,
        *,
        invoices: typing.Sequence[Invoice],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> StyleGuideCreationResult:
        """
        Creates new style guides from the provided invoices.

        Invoices are obtained by calling the `create_evaluation` method of the client.
        (Equivalent to making a POST request to `/index/evaluations`)
        See the [documentation](https://parlant.io/docs/concepts/customization/style-guides) for more information.

        Parameters
        ----------
        agent_id : str
            Unique identifier for the agent

        invoices : typing.Sequence[Invoice]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StyleGuideCreationResult
            Style guides successfully created. Returns the created style guides.

        Examples
        --------
        import asyncio

        from parlant.client import (
            AsyncParlantClient,
            Invoice,
            InvoiceData,
            Payload,
            StyleGuideCoherenceCheck,
            StyleGuideContent,
            StyleGuideEvent,
            StyleGuideExample,
            StyleGuideInvoiceData,
            StyleGuidePayload,
        )

        client = AsyncParlantClient(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.style_guides.create(
                agent_id="agent_id",
                invoices=[
                    Invoice(
                        payload=Payload(
                            kind="style_guide",
                            style_guide=StyleGuidePayload(
                                content=StyleGuideContent(
                                    principle="Use inclusive language and a positive tone",
                                    examples=[
                                        StyleGuideExample(
                                            before=[
                                                StyleGuideEvent(
                                                    source="ai_agent",
                                                    message="Your request is denied. Try again.",
                                                )
                                            ],
                                            after=[
                                                StyleGuideEvent(
                                                    source="ai_agent",
                                                    message="Unfortunately we can't fulfill that request right now. Let's see what else we can do to help!",
                                                )
                                            ],
                                            violation="The 'before' response is abrupt and lacks empathy.",
                                        )
                                    ],
                                ),
                                operation="add",
                                coherence_check=True,
                            ),
                        ),
                        checksum="abc123",
                        approved=True,
                        data=InvoiceData(
                            style_guide=StyleGuideInvoiceData(
                                coherence_checks=[
                                    StyleGuideCoherenceCheck(
                                        kind="contradiction_with_existing_style_guide",
                                        first=StyleGuideContent(
                                            principle="Use Imperial units",
                                            examples=[
                                                StyleGuideExample(
                                                    before=[
                                                        StyleGuideEvent(
                                                            source="customer",
                                                            message="How tall do I have to be to get on the roller coaster?",
                                                        ),
                                                        StyleGuideEvent(
                                                            source="ai_agent",
                                                            message="1.8 meters",
                                                        ),
                                                    ],
                                                    after=[
                                                        StyleGuideEvent(
                                                            source="customer",
                                                            message="How tall do I have to be to get on the roller coaster?",
                                                        ),
                                                        StyleGuideEvent(
                                                            source="ai_agent",
                                                            message="5 feet 11 inches",
                                                        ),
                                                    ],
                                                    violation="The 'before' message is in metric units, which is not imperial.",
                                                )
                                            ],
                                        ),
                                        second=StyleGuideContent(
                                            principle="Use Metric units",
                                            examples=[
                                                StyleGuideExample(
                                                    before=[
                                                        StyleGuideEvent(
                                                            source="customer",
                                                            message="How tall do I have to be to get on the roller coaster?",
                                                        ),
                                                        StyleGuideEvent(
                                                            source="ai_agent",
                                                            message="5 feet 11 inches",
                                                        ),
                                                    ],
                                                    after=[
                                                        StyleGuideEvent(
                                                            source="customer",
                                                            message="How tall do I have to be to get on the roller coaster?",
                                                        ),
                                                        StyleGuideEvent(
                                                            source="ai_agent",
                                                            message="1.8 meters",
                                                        ),
                                                    ],
                                                    violation="The 'before' message is in imperial units, which is not metric.",
                                                )
                                            ],
                                        ),
                                        issue="Conflicting approaches to writing units",
                                        severity=8,
                                    )
                                ],
                            ),
                        ),
                    )
                ],
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"agents/{jsonable_encoder(agent_id)}/style_guides",
            method="POST",
            json={
                "invoices": convert_and_respect_annotation_metadata(
                    object_=invoices,
                    annotation=typing.Sequence[Invoice],
                    direction="write",
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    StyleGuideCreationResult,
                    parse_obj_as(
                        type_=StyleGuideCreationResult,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def retrieve(
        self,
        agent_id: str,
        style_guide_id: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> StyleGuide:
        """
        Retrieves a style guide by its ID.

        Parameters
        ----------
        agent_id : str
            Unique identifier for the agent

        style_guide_id : str
            Unique identifier for the style guide

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StyleGuide
            Style guide details successfully retrieved.

        Examples
        --------
        import asyncio

        from parlant.client import AsyncParlantClient

        client = AsyncParlantClient(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.style_guides.retrieve(
                agent_id="agent_id",
                style_guide_id="style_guide_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"agents/{jsonable_encoder(agent_id)}/style_guides/{jsonable_encoder(style_guide_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    StyleGuide,
                    parse_obj_as(
                        type_=StyleGuide,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete(
        self,
        agent_id: str,
        style_guide_id: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Deletes a style guide from the agent.

        Deleting a non-existent style guide will return 404.
        No content will be returned from a successful deletion.

        Parameters
        ----------
        agent_id : str
            Unique identifier for the agent

        style_guide_id : str
            Unique identifier for the style guide

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from parlant.client import AsyncParlantClient

        client = AsyncParlantClient(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.style_guides.delete(
                agent_id="agent_id",
                style_guide_id="style_guide_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"agents/{jsonable_encoder(agent_id)}/style_guides/{jsonable_encoder(style_guide_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update(
        self,
        agent_id: str,
        style_guide_id: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> StyleGuide:
        """
        Deletes a style guide from the agent.

        Deleting a non-existent style guide will return 404.
        No content will be returned from a successful deletion.

        Parameters
        ----------
        agent_id : str
            Unique identifier for the agent

        style_guide_id : str
            Unique identifier for the style guide

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StyleGuide
            Style guide successfully updated. Returns the updated guide.

        Examples
        --------
        import asyncio

        from parlant.client import AsyncParlantClient

        client = AsyncParlantClient(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.style_guides.update(
                agent_id="agent_id",
                style_guide_id="style_guide_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"agents/{jsonable_encoder(agent_id)}/style_guides/{jsonable_encoder(style_guide_id)}",
            method="PATCH",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    StyleGuide,
                    parse_obj_as(
                        type_=StyleGuide,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
