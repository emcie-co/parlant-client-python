# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import pydantic
from .participant import Participant
import typing
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class MessageEventData(UniversalBaseModel):
    """
    DTO for data carried by a 'message' event.
    """

    message: str = pydantic.Field()
    """
    Text content of the message
    """

    participant: Participant
    flagged: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Indicates whether the message was flagged by moderation
    """

    tags: typing.Optional[typing.List[str]] = pydantic.Field(default=None)
    """
    Sequence of tags providing additional context about the message
    """

    fragments: typing.Optional[typing.List[str]] = pydantic.Field(default=None)
    """
    List of associated fragment references, if any
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
