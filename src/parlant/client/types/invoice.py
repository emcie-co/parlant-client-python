# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
from .payload import Payload
import pydantic
import typing
from .invoice_data import InvoiceData
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class Invoice(UniversalBaseModel):
    """
    Represents the result of evaluating a single payload in an evaluation task.

    An Invoice is a comprehensive record of the evaluation results, including:

    - A `payload` describing what kind of data was evaluated (e.g., guideline or style_guide).
    - A `checksum` to verify the integrity of the content.
    - An `approved` flag indicating whether the results are finalized.
    - An optional `data` object containing detailed findings (coherence checks, connections, etc.),
      if the evaluation is approved.
    - An optional `error` message if the evaluation failed.
    """

    payload: Payload
    checksum: str = pydantic.Field()
    """
    Checksum of the invoice content.
    """

    approved: bool = pydantic.Field()
    """
    Indicates whether the evaluation task the invoice represents has been approved.
    """

    data: typing.Optional[InvoiceData] = None
    error: typing.Optional[str] = pydantic.Field(default=None)
    """
    Describes any error that occurred during evaluation.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
