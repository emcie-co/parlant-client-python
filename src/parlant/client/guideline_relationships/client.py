# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..types.guideline_relationship_kind_dto import GuidelineRelationshipKindDto
from ..core.request_options import RequestOptions
from ..types.guideline_relationship import GuidelineRelationship
from ..core.pydantic_utilities import parse_obj_as
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..core.jsonable_encoder import jsonable_encoder
from ..errors.not_found_error import NotFoundError
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class GuidelineRelationshipsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list(
        self,
        *,
        kind: GuidelineRelationshipKindDto,
        entity_id: str,
        indirect: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[GuidelineRelationship]:
        """
        Parameters
        ----------
        kind : GuidelineRelationshipKindDto
            The kind of guideline relationship to list

        entity_id : str
            The ID of the entity to list relationships for

        indirect : typing.Optional[bool]
            Whether to include indirect relationships

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[GuidelineRelationship]
            Guideline relationships successfully retrieved. Returns a list of all guideline relationships.

        Examples
        --------
        from parlant.client import ParlantClient

        client = ParlantClient(
            base_url="https://yourhost.com/path/to/api",
        )
        client.guideline_relationships.list(
            kind="entailment",
            entity_id="entity_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "relationships",
            method="GET",
            params={
                "kind": kind,
                "entity_id": entity_id,
                "indirect": indirect,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[GuidelineRelationship],
                    parse_obj_as(
                        type_=typing.List[GuidelineRelationship],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create(
        self,
        *,
        kind: GuidelineRelationshipKindDto,
        source_guideline: typing.Optional[str] = OMIT,
        source_tag: typing.Optional[str] = OMIT,
        target_guideline: typing.Optional[str] = OMIT,
        target_tag: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GuidelineRelationship:
        """
        Parameters
        ----------
        kind : GuidelineRelationshipKindDto

        source_guideline : typing.Optional[str]
            Unique identifier for the guideline

        source_tag : typing.Optional[str]
            Unique identifier for the tag

        target_guideline : typing.Optional[str]
            Unique identifier for the guideline

        target_tag : typing.Optional[str]
            Unique identifier for the tag

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GuidelineRelationship
            Guideline relationship successfully created. Returns the created guideline relationship.

        Examples
        --------
        from parlant.client import ParlantClient

        client = ParlantClient(
            base_url="https://yourhost.com/path/to/api",
        )
        client.guideline_relationships.create(
            source_guideline="gid_123",
            target_tag="tid_456",
            kind="entailment",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "relationships",
            method="POST",
            json={
                "source_guideline": source_guideline,
                "source_tag": source_tag,
                "target_guideline": target_guideline,
                "target_tag": target_tag,
                "kind": kind,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GuidelineRelationship,
                    parse_obj_as(
                        type_=GuidelineRelationship,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def retrieve(
        self,
        relationship_id: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GuidelineRelationship:
        """
        Parameters
        ----------
        relationship_id : str
            identifier of guideline relationship

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GuidelineRelationship
            Guideline relationship successfully retrieved. Returns the requested guideline relationship.

        Examples
        --------
        from parlant.client import ParlantClient

        client = ParlantClient(
            base_url="https://yourhost.com/path/to/api",
        )
        client.guideline_relationships.retrieve(
            relationship_id="gr_123",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"relationships/{jsonable_encoder(relationship_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GuidelineRelationship,
                    parse_obj_as(
                        type_=GuidelineRelationship,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete(
        self,
        relationship_id: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        relationship_id : str
            identifier of guideline relationship

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from parlant.client import ParlantClient

        client = ParlantClient(
            base_url="https://yourhost.com/path/to/api",
        )
        client.guideline_relationships.delete(
            relationship_id="gr_123",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"relationships/{jsonable_encoder(relationship_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncGuidelineRelationshipsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list(
        self,
        *,
        kind: GuidelineRelationshipKindDto,
        entity_id: str,
        indirect: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[GuidelineRelationship]:
        """
        Parameters
        ----------
        kind : GuidelineRelationshipKindDto
            The kind of guideline relationship to list

        entity_id : str
            The ID of the entity to list relationships for

        indirect : typing.Optional[bool]
            Whether to include indirect relationships

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[GuidelineRelationship]
            Guideline relationships successfully retrieved. Returns a list of all guideline relationships.

        Examples
        --------
        import asyncio

        from parlant.client import AsyncParlantClient

        client = AsyncParlantClient(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.guideline_relationships.list(
                kind="entailment",
                entity_id="entity_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "relationships",
            method="GET",
            params={
                "kind": kind,
                "entity_id": entity_id,
                "indirect": indirect,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[GuidelineRelationship],
                    parse_obj_as(
                        type_=typing.List[GuidelineRelationship],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create(
        self,
        *,
        kind: GuidelineRelationshipKindDto,
        source_guideline: typing.Optional[str] = OMIT,
        source_tag: typing.Optional[str] = OMIT,
        target_guideline: typing.Optional[str] = OMIT,
        target_tag: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GuidelineRelationship:
        """
        Parameters
        ----------
        kind : GuidelineRelationshipKindDto

        source_guideline : typing.Optional[str]
            Unique identifier for the guideline

        source_tag : typing.Optional[str]
            Unique identifier for the tag

        target_guideline : typing.Optional[str]
            Unique identifier for the guideline

        target_tag : typing.Optional[str]
            Unique identifier for the tag

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GuidelineRelationship
            Guideline relationship successfully created. Returns the created guideline relationship.

        Examples
        --------
        import asyncio

        from parlant.client import AsyncParlantClient

        client = AsyncParlantClient(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.guideline_relationships.create(
                source_guideline="gid_123",
                target_tag="tid_456",
                kind="entailment",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "relationships",
            method="POST",
            json={
                "source_guideline": source_guideline,
                "source_tag": source_tag,
                "target_guideline": target_guideline,
                "target_tag": target_tag,
                "kind": kind,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GuidelineRelationship,
                    parse_obj_as(
                        type_=GuidelineRelationship,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def retrieve(
        self,
        relationship_id: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GuidelineRelationship:
        """
        Parameters
        ----------
        relationship_id : str
            identifier of guideline relationship

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GuidelineRelationship
            Guideline relationship successfully retrieved. Returns the requested guideline relationship.

        Examples
        --------
        import asyncio

        from parlant.client import AsyncParlantClient

        client = AsyncParlantClient(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.guideline_relationships.retrieve(
                relationship_id="gr_123",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"relationships/{jsonable_encoder(relationship_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GuidelineRelationship,
                    parse_obj_as(
                        type_=GuidelineRelationship,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete(
        self,
        relationship_id: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        relationship_id : str
            identifier of guideline relationship

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from parlant.client import AsyncParlantClient

        client = AsyncParlantClient(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.guideline_relationships.delete(
                relationship_id="gr_123",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"relationships/{jsonable_encoder(relationship_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
